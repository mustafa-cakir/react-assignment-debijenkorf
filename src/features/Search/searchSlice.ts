import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { ISearchState, ISuggestion } from '../../app/types';
import { getSearchSuggestions } from './searchAPI';

const initialState: ISearchState = {
    suggestions: [],
    isLoading: true,
    error: null,
    isShowDropdown: false,
    keyword: '',
};

export const searchSlice = createSlice({
    name: 'search',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        cancelSearch: state => {
            state.suggestions = [];
            state.keyword = '';
            state.isLoading = true;
        },
        setKeyword: (state, action: PayloadAction<string>) => {
            state.keyword = action.payload;
        },
        setIsShowDropdown: (state, action: PayloadAction<boolean>) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.isShowDropdown = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: builder => {
        builder
            .addCase(getSearchSuggestions.pending, state => {
                state.isLoading = true;
                state.error = null;
            })
            .addCase(getSearchSuggestions.fulfilled, (state, action: PayloadAction<ISuggestion[]>) => {
                state.suggestions = action.payload;
                state.isLoading = false;
            })
            .addCase(getSearchSuggestions.rejected, (state, action) => {
                state.isLoading = false;
                state.error = action.payload as string;
            });
    },
});

export const { reducer: searchReducer, actions } = searchSlice;
export const { cancelSearch, setIsShowDropdown, setKeyword } = actions;

export default searchReducer;
